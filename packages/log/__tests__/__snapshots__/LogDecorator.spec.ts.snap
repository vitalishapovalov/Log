// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`log/Log test when used as a class decorator should correctly log apply 1`] = `"[\\"\\\\n  Logger         @  TFunction                                       \\\\n  Call function  @  TFunction(arg1: Number, arg2: Number): Number;  \\\\n  Call context   @  {}                                              \\\\n  Call with      @  (20, 30)                                        \\\\n  Call result    @  50                                              \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log constructor 1`] = `"[\\"\\\\n  Logger                  @  TConstructor                      \\\\n  Construct new instance  @  Object                            \\\\n  Construct arguments     @  ({ a: 10 }, 100, \\\\\\"100\\\\\\", [\\\\\\"str\\\\\\"])  \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log defineProperty 1`] = `"[\\"\\\\n  Logger                  @  TLogFullProperty      \\\\n  Call defineProperty on  @  TLogFullProperty      \\\\n  Property key            @  prop                  \\\\n  Property descriptor     @  { value: \\\\\\"new val\\\\\\" }  \\\\n  Call result             @  true                  \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log delete 1`] = `"[\\"\\\\n  Logger                  @  TLogFullProperty        \\\\n  Access delete operator  @  delete Object[\\\\\\"prop\\\\\\"];  \\\\n  Delete result           @  true                    \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log getOwnPropertyDescriptor 1`] = `"[\\"\\\\n  Logger                            @  TLogFullProperty                              \\\\n  Call getOwnPropertyDescriptor on  @  \\\\\\"prop\\\\\\"                                        \\\\n  Retrieved descriptor              @  { value: \\\\\\"prop_value\\\\\\", writable: true, ... }  \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log getPrototypeOf 1`] = `"[\\"\\\\n  Logger                  @  TGetPrototypeOf  \\\\n  Call getPrototypeOf of  @  TGetPrototypeOf  \\\\n  Retrieved prototype     @  Object           \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log has 1`] = `"[\\"\\\\n  Logger              @  TLogFullProperty            \\\\n  Access in operator  @  \\\\\\"prop\\\\\\" in TLogFullProperty  \\\\n  Access result       @  true                        \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log isExtensible 1`] = `"[\\"\\\\n  Logger                 @  TIsExtensible  \\\\n  Check isExtensible of  @  TIsExtensible  \\\\n  Result                 @  true           \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log only call events on methods 1`] = `"[\\"\\\\n  Logger       @  T                  \\\\n  Call method  @  method(): String;  \\\\n  Call result  @  \\\\\\"method_value\\\\\\"     \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log only get/set events on getters and setters 1`] = `"[\\"\\\\n  Logger           @  T                          \\\\n  Access property  @  get getSetProp(): String;  \\\\n  Access result    @  \\\\\\"getter_getSetProp\\\\\\"        \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log only get/set events on getters and setters 2`] = `"[\\"\\\\n  Logger        @  T                             \\\\n  Set property  @  set getSetProp(arg: String);  \\\\n  Set succeed   @  getSetProp = \\\\\\"\\\\\\";              \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log only get/set events on property 1`] = `"[\\"\\\\n  Logger           @  T              \\\\n  Access property  @  prop: String;  \\\\n  Access result    @  \\\\\\"prop_value\\\\\\"   \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log only get/set events on property 2`] = `"[\\"\\\\n  Logger        @  T              \\\\n  Set property  @  prop: String;  \\\\n  Set succeed   @  prop = \\\\\\"\\\\\\";     \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log ownKeys 1`] = `"[\\"\\\\n  Logger           @  TOwnKeys                    \\\\n  Get own keys of  @  TOwnKeys                    \\\\n  Result           @  [\\\\\\"key1\\\\\\", \\\\\\"key2\\\\\\", Symbol()]  \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log ownKeys 2`] = `"[\\"\\\\n  Logger           @  TOwnKeys                    \\\\n  Get own keys of  @  TOwnKeys                    \\\\n  Result           @  [\\\\\\"key1\\\\\\", \\\\\\"key2\\\\\\", Symbol()]  \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log ownKeys 3`] = `"[\\"\\\\n  Logger           @  TOwnKeys                    \\\\n  Get own keys of  @  TOwnKeys                    \\\\n  Result           @  [\\\\\\"key1\\\\\\", \\\\\\"key2\\\\\\", Symbol()]  \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log ownKeys 4`] = `"[\\"\\\\n  Logger           @  TOwnKeys                    \\\\n  Get own keys of  @  TOwnKeys                    \\\\n  Result           @  [\\\\\\"key1\\\\\\", \\\\\\"key2\\\\\\", Symbol()]  \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log ownKeys 5`] = `"[\\"\\\\n  Logger           @  TOwnKeys                    \\\\n  Get own keys of  @  TOwnKeys                    \\\\n  Result           @  [\\\\\\"key1\\\\\\", \\\\\\"key2\\\\\\", Symbol()]  \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log preventExtensions 1`] = `"[\\"\\\\n  Logger                     @  TPreventExtensions  \\\\n  Call preventExtensions on  @  TPreventExtensions  \\\\n  Result                     @  true                \\"]"`;

exports[`log/Log test when used as a class decorator should correctly log setPrototypeOf 1`] = `"[\\"\\\\n  Logger                  @  TSetPrototypeOf  \\\\n  Call setPrototypeOf on  @  TSetPrototypeOf  \\\\n  Set succeed             @  Object           \\"]"`;
